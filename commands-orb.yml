---
version: 2.1
description: Reusable Commands

examples:
  package_install:
    description: Download and install a deb package.
    usage:
      version: 2.1
      orbs:
        cmds: taqtiqa/commands@0.1.14
      jobs:
        vagrant:
          machine: true
          steps:
            - cmds/get-pkg-check-install:
                url: 'https://releases.hashicorp.com/vagrant/2.2.5/vagrant_2.2.5_x86_64.deb'
                checksum: '2bfbecb6cd75f1b97fa9c10264d2e2fb6c428313'
                verify_command: '/usr/bin/vagrant'
    result:

commands:
  get-pkg-check-install:
    description: 'Download package, checksum, install.'
    parameters:
      url:
        description: 'URL of the file.'
        type: string
      checksum:
        description: 'File checksum.'
        type: string
      checksum_command:
        description: 'Command to check file checksum.'
        type: string
        default: 'sha1sum'
      verify_command:
        description: 'Command to verify the installation.'
        type: string
        default: "echo 'You should verify installation of:' && echo '<< parameters.url >>'"
    steps:
      - run: |
            set -e
            pkg_wait() {
                # Stop all apt daily service related instances
                sudo systemctl stop apt-daily.service
                sudo systemctl kill --kill-who=all apt-daily.service

                # wait until `apt-get updated` has been killed
                while ! (sudo systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)')
                do
                  sleep 1;
                done
                while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do
                  sudo lsof /var/lib/dpkg/lock
                  tail /var/log/unattended-upgrades/unattended-upgrades-dpkg.log || true
                  killall apt-get || true
                  killall dpkg || true
                  sleep 1
                done;
              }
            # OS check
            osName="$(awk -F'=' '$1 == "ID" { print $2 }' /etc/os-release)"
            case "$osName" in
              debian|ubuntu)
                packCmdPreWait="while sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock >/dev/null 2>&1; do; sleep 1; done;"
                packCmdPre="pkg_wait && sudo apt-get update -qq"
                packCmdInst="pkg_wait && sudo apt-get install -qq --no-install-recommends"
                packCmdDel="pkg_wait && sudo apt-get purge --auto-remove -qq"
                packCmdClean="sudo rm -rf /var/lib/apt/lists/*"
                ;;
              alpine)
                packCmdPre=":"
                packCmdInst="sudo apk --no-cache add"
                packCmdDel="sudo apk del"
                packCmdClean=":"
                ;;
              *)
                echo "error: OS $osName unsupported" >&2
                exit 1
                ;;
            esac

            # Read parameters
            url="<< parameters.url >>"
            checksum="<< parameters.checksum >>"
            checksumProgram=<< parameters.checksum_command >>
            verifyProgram=<< parameters.verify_command >>

            if [ -z "${url:-}" ]; then
              echo "error: Option -u is required" >&2
              exit 1
            fi

            # Install curl if required
            which curl 2>&1 >/dev/null && curlPresent=true
            if [ -z "${curlPresent:-}" ]; then
              $packCmdPre >/dev/null
              $packCmdInst curl >/dev/null
            fi

            # Install ca-certificates if required
            scheme=$(echo $url | awk -F ":" '{print $1}')
            which update-ca-certificates 2>&1 >/dev/null && caCertsPresent=true
            if [ "${scheme:-}" = "https" -a -z "${caCertsPresent:-}" ]; then
              $packCmdPre >/dev/null
              $packCmdInst ca-certificates >/dev/null
            fi

            # Set file name if unset
            if [ -z "${fileName:-}" ]; then
              fileName=$(echo $url | awk -F "/" '{print $NF}' | awk -F "?" '{print $1}')
            fi

            # Create tmpdir to download file
            tmpdir=$(mktemp -d)
            cd "$tmpdir"

            # Download file from URL.
            curl -fsSL "$url" -o "$fileName"

            # Verify checksum if passed as option
            if [ ! -z "${checksum:-}" ]; then
              echo "$checksum  $fileName" | "$checksumProgram" -c -
            fi

            # Install file and delete tmpdir
            $packCmdPre >/dev/null
            $packCmdInst $fileName >/dev/null
            cd - >/dev/null
            rm -rf "$tmpdir"

            # Uninstall curl if we installed it earlier
            if [ -z "${curlPresent:-}" ]; then
              $packCmdDel curl >/dev/null
              $packCmdClean
            fi

            # Uninstall ca-certificates if we installed it earlier
            if [ -z "${caCertsPresent:-}" ]; then
              $packCmdDel ca-certificates >/dev/null
              $packCmdClean
            fi

            # Verify installation
            $verifyProgram
